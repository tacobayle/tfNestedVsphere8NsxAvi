#cloud-config
users:
  - default

ssh_pwauth: True

chpasswd:
  list: |
    ubuntu:${password}
  expire: False

hostname: ${hostname}

write_files:
  - content: |
      #!/bin/bash
      run_cmd() {
        retry=10
        pause=60
        attempt=0
        echo "############################################################################################"
        while [ $attempt -ne $retry ]; do
          if eval "$@"; then
            echo "$1 PASSED"
            break
          else
            echo "$1 FAILED"
          fi
          ((attempt++))
          sleep $pause
          if [ $attempt -eq $retry ]; then
            echo "$1 FAILED after $retry retries" | tee /tmp/cloudInitFailed.log
            exit 255
          fi
        done
      }
      iface=`ip -o link show | awk -F': ' '{print $2}' | tail -1`
      mac=`ip -o link show | awk -F'link/ether ' '{print $2}' | awk -F' ' '{print $1}' | tail -1`
      hostname=`hostname`
      echo "${ip} $hostname" | sudo tee -a /etc/hosts
      echo "${ip_vcenter} ${vcenter_name}.${dns_domain}" | sudo tee -a /etc/hosts
      cp ${netplanFile} ${netplanFile}.old
      echo "network:" | sudo tee ${netplanFile}
      echo "    ethernets:" | sudo tee -a ${netplanFile}
      echo "        $iface:" | sudo tee -a ${netplanFile}
      echo "            dhcp4: false" | sudo tee -a ${netplanFile}
      echo "            addresses: [${ipCidr}]" | sudo tee -a ${netplanFile}
      echo "            match:" | sudo tee -a ${netplanFile}
      echo "                macaddress: $mac" | sudo tee -a ${netplanFile}
      echo "            set-name: $iface" | sudo tee -a ${netplanFile}
      echo "            gateway4: ${defaultGw}" | sudo tee -a ${netplanFile}
      echo "            nameservers:" | sudo tee -a ${netplanFile}
      echo "              addresses: [${dns}]" | sudo tee -a ${netplanFile}
      echo "    version: 2" | sudo tee -a ${netplanFile}
      sudo netplan apply
      run_cmd '! sudo apt update | grep Err'
      run_cmd 'sudo apt install -y python3-pip; ls /usr/bin/pip3'
      run_cmd 'sudo apt install -y jq; ls /usr/bin/jq'
      run_cmd 'sudo apt install -y expect; ls /usr/bin/expect'
      run_cmd 'sudo apt install -y python3-jmespath; pip3 list | grep jmespath'
      run_cmd 'pip3 install --upgrade pip'
      run_cmd 'pip3 install ansible==${ansible_version}; ls /usr/local/bin/ansible-playbook'
      run_cmd 'pip3 install avisdk==${avi_sdk_version}; pip3 list | grep avisdk'
      run_cmd 'sudo -u ubuntu ansible-galaxy collection install vmware.alb; sudo -u ubuntu ansible-galaxy collection list | grep vmware.alb'
      run_cmd 'pip3 install dnspython; pip3 list | grep dnspython'
      run_cmd 'pip3 install netaddr; pip3 list | grep netaddr'
      apt install -y language-pack-en python3-pip python3-jmespath sshpass bind9 bind9utils bind9-doc bind9-host
      #
      # terraform install
      #
      sudo curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
      sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
      sudo apt-get update && sudo apt-get install terraform
      #
      # hosts
      #
      echo ""
      echo "++++++++++++++++++++++++++++++++"
      echo "updating local /etc/hosts with vCenter and esxi0"
      contents=$(cat /etc/hosts | grep -v ${vcenter_ip})
      echo "$${contents}" | sudo tee /etc/hosts
      contents="${vcenter_ip} ${vcenter_name}.${domain}"
      echo "$${contents}" | sudo tee -a /etc/hosts
      #
      # NTP config
      #
      run_cmd 'sudo apt install -y ntp; ls /usr/sbin/ntpd'
      cp /etc/ntp.conf /etc/ntp.conf.old
      rm /etc/ntp.conf
      touch /etc/ntp.conf
      IFS=","
      ntp_servers=${ntp}
      for ntp_server in $ntp_servers
      do
        echo "server $ntp_server iburst" | tee -a /etc/ntp.conf
      done
      run_cmd 'sudo service ntp start; sudo service ntp status | grep running'
      sudo service ntp stop
      sleep 5
      run_cmd 'sudo service ntp start; sudo service ntp status | grep running'
      #
      # Bind config
      #
      sudo cp /etc/bind/named.conf /etc/bind/named.conf.old
      sudo tee /etc/bind/named.conf > /dev/null <<EOT
      include "/etc/bind/named.conf.options";
      include "/etc/bind/named.conf.local";
      include "/etc/bind/named.conf.default-zones";
      key ${keyName}. {
       algorithm hmac-md5;
       secret ${secret};
       };
      EOT
      #
      sudo cp /etc/bind/named.conf.options /etc/bind/named.conf.options.old
      sudo tee /etc/bind/named.conf.options > /dev/null <<EOT
      options {
        directory "/var/cache/bind";
        recursion yes;
        notify yes;
        allow-query { any; };
        allow-query-cache { any; };
        allow-recursion { any; };
        forwarders { ${forwarders}; };
        dnssec-validation no;
        auth-nxdomain no; # conform to RFC1035
        listen-on { localhost; any; };
        listen-on-v6 { localhost; any; };
        allow-transfer { any; };
      };
      EOT
      #
      sudo cp /etc/bind/named.conf.local /etc/bind/named.conf.local.old
      sudo tee /etc/bind/named.conf.local > /dev/null <<EOT
      zone "${domain}" {
        type master;
        allow-transfer { any; };
        update-policy {
          grant myKeyName zonesub any;
        };
        file "/var/lib/bind/db.${domain}";
      };
      zone "${reverse}.in-addr.arpa" {
        type master;
        update-policy {
          grant myKeyName zonesub any;
        };
        allow-transfer { any; };
        file "/var/lib/bind/db.${reverse}";
      };
      EOT
      #
      sudo tee /var/lib/bind/db.${domain} > /dev/null <<EOT
      \$ORIGIN .
      \$TTL 60
      ${domain}                IN SOA dns.${domain}. admin.${domain}. (
                                      329        ; serial
                                      604800     ; refresh (1 week)
                                      86400      ; retry (1 day)
                                      2419200    ; expire (4 weeks)
                                      604800     ; minimum (1 week)
                                      )
                              NS      dns.${domain}.
      \$ORIGIN ${domain}.
      dns                     A       ${ip}
      \$TTL 3600       ; 1 hour
      EOT
      #
      sudo tee /var/lib/bind/db.${reverse} > /dev/null <<EOT
      \$ORIGIN .
      \$TTL 60
      ${reverse}.in-addr.arpa     IN SOA  dns.${domain}. admin.${domain}. (
                                      298        ; serial
                                      604800     ; refresh (1 week)
                                      86400      ; retry (1 day)
                                      2419200    ; expire (4 weeks)
                                      604800     ; minimum (1 week)
                                      )
                              NS      dns.${domain}.
      \$ORIGIN ${reverse}.in-addr.arpa.
      ${lastOctet}            PTR     dns.${domain}.
      EOT
      sudo service bind9 restart
      echo "cloud init done" | tee /tmp/cloudInitDone.log
    path: /opt/bootstrap.sh
    permissions: 0755
  - content: |
      ${username} ALL=(ALL) NOPASSWD:ALL
    path: /etc/sudoers.d/${username}

runcmd:
  - /opt/bootstrap.sh